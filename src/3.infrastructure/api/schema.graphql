type Query {
  restaurants(ownerId: ID): [Restaurant!]!
  restaurant(id: ID!): Restaurant
  me: User
}

type Mutation {
  signUp(input: SignUpInput!): SignUpOutput!
  login(email: String!, password: String!): AuthPayload
  createRestaurant(input: CreateRestaurantInput!): Restaurant!
  reviewRestaurant(input: ReviewRestaurantInput!): Review!
  replyToReview(input: ReplyToReviewInput!): ReplyToReviewOutput!
}

# TODO use scalars for email and password
input SignUpInput {
  email: String!
  password: String!
  name: String
  role: Role
}

type SignUpOutput {
  success: Boolean!
}

type AuthPayload {
  token: String!
}

input CreateRestaurantInput {
  name: String!
}

input ReviewRestaurantInput {
  restaurantId: ID!
  rating: Int!
  comment: String!
  visitedAt: Date!
}

type ReviewRestaurantOutput {
  success: Boolean!
}

input ReplyToReviewInput {
  reviewId: ID!
  reply: String!
}

type ReplyToReviewOutput {
  success: Boolean!
}

type Review {
  id: ID!
  restaurantId: ID!
  rating: Int!
  comment: String!
  visitedAt: Date!
}

type User {
  id: ID!
  name: String
  email: String!
  role: Role!
}

type Restaurant {
  id: ID!
  ownerId: ID!
  name: String!
  rating: Int
  # reviews: [Review!]!
}

enum Role {
  USER
  OWNER
  # ADMIN # We don't need this yet
}

"""
ISO-8601 encoded UTC date string. Example value: `"2020-05-04T13:37:01.337Z"`
"""
scalar Date
